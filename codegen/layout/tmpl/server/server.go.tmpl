{{$services := .Services }}

package server

import (
	"runtime/debug"

	grpcmiddleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpczap "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
	grpcrecovery "github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	grpcctxtags "github.com/grpc-ecosystem/go-grpc-middleware/tags"
	grpcvalidator "github.com/grpc-ecosystem/go-grpc-middleware/validator"
    {{if .EnablePrometheus}}
    grpcprometheus "github.com/grpc-ecosystem/go-grpc-prometheus"  
    {{end}}
	
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"github/linhbkhn95/kitchen/pkg/logger"

	"github/linhbkhn95/{{ .ProjectName }}/config"
	"github/linhbkhn95/kitchen/pkg/grpc/middleware/grpcerror"
	"github/linhbkhn95/kitchen/pkg/appmode"

    "github/linhbkhn95/{{ .ProjectName }}/server/handler"
    "github/linhbkhn95/{{ .ProjectName }}/server/grpc"

)

func Serve() {

	// init connection
	// inject dependency

	loggerInstance, err := logger.InitLogger(config.Log, logger.LoggerBackendZap)
	if err != nil {
		logger.Fatalf("Error when initing logger cause by %v", err)
	}
	zapLogger, err := logger.GetDesugaredZapLoggerDelegate(loggerInstance)
	if err != nil {
		logger.Fatalf("Error when getting zapLogger cause by %v", err)
	}

	grpczap.ReplaceGrpcLoggerV2(zapLogger)
    {{if .EnablePrometheus}}
	grpcprometheus.EnableHandlingTimeHistogram()
    {{end}}

	internalServerErr := status.Error(codes.Internal, "Something went wrong in our side.")

	recoveryOpt := grpcrecovery.WithRecoveryHandler(func(err interface{}) error {
		logger.WithFields(logger.Fields{"error": err, "stacktrace": string(debug.Stack())}).Error("unexpected error...")
		return internalServerErr
	})
	unaryOpts := []grpc.UnaryServerInterceptor{
        {{if .EnablePrometheus}}
            grpcprometheus.UnaryServerInterceptor,
        {{end}}
		grpcctxtags.UnaryServerInterceptor(grpcctxtags.WithFieldExtractor(grpcctxtags.CodeGenRequestFieldExtractor)),
		grpcvalidator.UnaryServerInterceptor(),
		grpcrecovery.UnaryServerInterceptor(recoveryOpt),
		grpczap.UnaryServerInterceptor(zapLogger),
		grpcerror.UnaryServerInterceptor(config.Mode == appmode.Development, internalServerErr),
	}

	streamOpts := []grpc.StreamServerInterceptor{
        {{if .EnablePrometheus}}
            grpcprometheus.StreamServerInterceptor,
        {{end}}
		grpcctxtags.StreamServerInterceptor(grpcctxtags.WithFieldExtractor(grpcctxtags.CodeGenRequestFieldExtractor)),
		grpcvalidator.StreamServerInterceptor(),
		grpcrecovery.StreamServerInterceptor(recoveryOpt),
		grpczap.StreamServerInterceptor(zapLogger),
	}
	
 
    s := server.NewServer(config.Server, config.Mode == appmode.Development,
		grpcmiddleware.WithUnaryServerChain(unaryOpts...),
		grpcmiddleware.WithStreamServerChain(streamOpts...),
	)

    {{- range $services}}
        {{.ServiceAliasName}}Server := handler.New{{ .ShortServiceName}}Server()
    {{- end}}

    // Register your services here.
    
	if err := s.Register(
        {{- range $services}}
            {{.ServiceAliasName}}Server,
        {{- end}}
    ); err != nil {
		logger.Fatalf("Error register servers %v", err)
	}

	logger.WithFields(logger.Fields{"grpc_addr": config.Server.GRPC.Host}).
		WithFields(logger.Fields{"grpc_port": config.Server.GRPC.Port}).
		WithFields(logger.Fields{"http_addr": config.Server.HTTP.Host}).
		WithFields(logger.Fields{"http_port": config.Server.HTTP.Port}).
		Info("Starting server...")
	if err := s.Serve(); err != nil {
		logger.Fatalf("Error start server %v", err)
	}

}
