// Code generated by go generate; DO NOT EDIT.
// This file was generated by @generated
// source: {{.TemplateSource}}
{{$services := .Services }}
package server
import (
    "context"
    "fmt"
    "net"
    {{if .EnableHTTP}}
        http "net/http"    
    {{end}}
    "os"
    "os/signal"
    "syscall"
    "time"

    {{if .EnableHTTP}}
        "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
    {{end}}

    {{if .EnableMetric}}
        promhttp "github.com/prometheus/client_golang/prometheus/promhttp"
    {{end}}
    "google.golang.org/grpc/credentials/insecure"
	"google.golang.org/protobuf/encoding/protojson"
    grpc "google.golang.org/grpc"
    
    {{- range $services}}
        {{.ServiceAliasName}} "{{.PackageName}}"
    {{- end}}
)

type (
    // Server is server struct which contains both grpc and http server. 
	Server struct {
		gRPC                 *grpc.Server
        {{- if .EnableHTTP}}
		    mux                  *runtime.ServeMux
        {{- end}}
		cfg                  Config
		isRunningDevelopment bool
	}

	// Config hold http/grpc server config
	Config struct {
		GRPC ServerListen `yaml:"grpc" mapstructure:"grpc"`
		HTTP ServerListen `yaml:"http" mapstructure:"http"`
	}

	// ServerListen config for host/port socket listener
	// nolint:revive
	ServerListen struct {
		Host string `yaml:"host" mapstructure:"host"`
		Port int    `yaml:"port" mapstructure:"port"`
	}
)

// DefaultConfig return a default server config
func DefaultConfig() Config {
	return NewConfig(10443, 10080)
}

// NewConfig return a optional config with grpc port and http port.
func NewConfig(grpcPort, httpPort int) Config {
    return Config{
        GRPC: ServerListen{
            Host: "0.0.0.0",
            Port: grpcPort,
        },
        
        HTTP: ServerListen{
            Host: "0.0.0.0",
            Port: httpPort,
        },
    }
}

// String return socket listen DSN
func (l ServerListen) String() string {
	return fmt.Sprintf("%s:%d", l.Host, l.Port)
}

func NewServer(cfg Config,isRunningDevelopment bool, opt ...grpc.ServerOption) *Server {
    return &Server{
        gRPC: grpc.NewServer(opt...),
        {{- if .EnableHTTP}}
            mux: runtime.NewServeMux(
                runtime.WithMarshalerOption(runtime.MIMEWildcard,
                    &runtime.JSONPb{
                        MarshalOptions: protojson.MarshalOptions{
                            UseProtoNames:   false,
                            UseEnumNumbers:  false,
                            EmitUnpopulated: true,
                        },
                        UnmarshalOptions: protojson.UnmarshalOptions{
                            DiscardUnknown: true,
                        },
                    })),
        {{- end}}
        cfg: cfg,
        isRunningDevelopment: isRunningDevelopment,
    }
}
func (s *Server) Register(grpcServer ...interface{}) error {
    for _, srv := range grpcServer {
        switch _srv := srv.(type) {
        {{range $services}}
        case {{.ServiceAliasName}}.{{.ServiceName}}Server:
            {{.ServiceAliasName}}.Register{{.ServiceName}}Server(s.gRPC, _srv)
            if err := {{.ServiceAliasName}}.Register{{.ServiceName}}HandlerFromEndpoint(context.Background(), s.mux, s.cfg.GRPC.String(), []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}); err != nil {
                return err
            }
        {{end}}
        default:
            return fmt.Errorf("Unknown GRPC Service to register %#v", srv)
        }
    }
    return nil
}

// Serve server listen for HTTP and GRPC
func (s *Server) Serve() error {
    stop := make(chan os.Signal, 1)
    errch := make(chan error)
    signal.Notify(stop, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
    {{if .EnableHTTP}}
         httpMux := http.NewServeMux()
    {{end}}

    {{if and .EnableHTTP .EnableMetric}}
        httpMux.Handle("/metrics", promhttp.Handler())
    {{end}}
    {{if .EnableHTTP}}
        httpMux.Handle("/", s.mux)
        httpServer := http.Server{
            Addr:    s.cfg.HTTP.String(),
            Handler: httpMux,
        }
        go func() {
            if err := httpServer.ListenAndServe(); err != nil {
                errch <- err
            }
        }()
    {{end}}
    go func() {
        listener, err := net.Listen("tcp", s.cfg.GRPC.String())
        if err != nil {
            errch <- err
            return
        }
        if err := s.gRPC.Serve(listener); err != nil {
            errch <- err
        }
    }()
    for {
        select {
        case <-stop:
            ctx, cancelFn := context.WithTimeout(context.Background(), 30*time.Second)
            defer cancelFn()
            s.gRPC.GracefulStop()
            {{if .EnableHTTP}}
                if err := httpServer.Shutdown(ctx); err != nil {
                    fmt.Println("failed to stop server: %w", err)
                }
            {{end}}
            if !s.isRunningDevelopment {
                fmt.Println("Shutting down. Wait for 15 seconds")
                time.Sleep(15 * time.Second)
            }
            return nil
        case err := <-errch:
            return err
        }
    }
}
